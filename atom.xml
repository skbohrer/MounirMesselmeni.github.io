<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Awesome notes]]></title>
  <link href="http://MounirMesselmeni.github.io/atom.xml" rel="self"/>
  <link href="http://MounirMesselmeni.github.io/"/>
  <updated>2013-06-30T17:13:09+01:00</updated>
  <id>http://MounirMesselmeni.github.io/</id>
  <author>
    <name><![CDATA[Mounir Messelmeni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Sublime Text 3 on Fedora 19]]></title>
    <link href="http://MounirMesselmeni.github.io/2013/06/30/installing-sublime-text-3-on-fedora-19/"/>
    <updated>2013-06-30T16:03:00+01:00</updated>
    <id>http://MounirMesselmeni.github.io/2013/06/30/installing-sublime-text-3-on-fedora-19</id>
    <content type="html"><![CDATA[<p>To install sublime text on Fedora 19 (16, 17 and 18), download this gist</p>

<p><a href="http://www.sublimetext.com/blog/articles/sublime-text-3-public-beta">Sublime Text 3</a> Beta is now open to non-registered users. <a href="http://www.sublimetext.com/3">Download</a> the tarball (32 or 64 bits).</p>

<ul>
<li>Go to your Downloads folder: <code>cd Downloads</code></li>
<li>Download or copy this GIST in your Downloads folder.</li>
<li>Execute this script by <code>chmod +x sublime3_fedora19.sh</code> and then <code>sudo ./sublime3_fedora19.sh sublime_text_3_build_3047_x64.tar.bz2</code>, <code>sublime_text_3_build_3047_x64.tar.bz2</code> is the downloaded tarball, change it if you download other version.</li>
<li>Now your sublime text is installed and integrated to your gnome desktop.</li>
</ul>


<!-- more -->




<div><script src='https://gist.github.com/5895264.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<h2>Sublime Text 3 Package Control</h2>

<p>To enable Package control in Sublime Text 3:</p>

<ul>
<li>Go into Sublime Text Packages : <code>cd ~/.config/sublime-text-3/Packages/</code></li>
<li>Clone this repository: <code>git clone git://github.com/wbond/sublime_package_control.git Package\ Control</code></li>
<li>Go into Package Control: <code>cd Package\ Control</code></li>
<li>Checkout Python 3 branch: <code>git checkout python3</code></li>
</ul>


<p>Restart Sublime Text 3 and you should have Package Control working.</p>

<p><a href="http://wbond.net/sublime_packages/package_control/installation#ST3">Source</a></p>

<p><a href="https://github.com/wbond/sublime_package_control/wiki/Sublime-Text-3-Compatible-Packages">Here&rsquo;s</a> the list of compatible plugins.</p>

<h2>Sublime Text 3 Useful Shortcuts</h2>

<div><script src='https://gist.github.com/5895595.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading CSV File With Javascript and HTML5 File API]]></title>
    <link href="http://MounirMesselmeni.github.io/2012/11/20/javascript-csv/"/>
    <updated>2012-11-20T20:43:00+01:00</updated>
    <id>http://MounirMesselmeni.github.io/2012/11/20/javascript-csv</id>
    <content type="html"><![CDATA[<p>In a specific project, the client want to read a CSV file, process and show data into an <a href="http://openlayers.org/">OpenLayers</a> Map.</p>

<p>So it come in my mind to write a simple html/javascript application, without any backend server.</p>

<h2>How to read a file via browser ?</h2>

<p>The unique constraint was how can I read the CSV file in browser.</p>

<p>HTML5 finally provides a standard way to interact with local files, via the <a href="http://www.w3.org/TR/file-upload/">File API</a></p>

<p>We are going to use <a href="http://dev.w3.org/2006/webapi/FileAPI/#dfn-filereader">FileReader</a></p>

<!-- more -->


<p>First, let’s check if the browser support FileReader API</p>

<figure class='code'><figcaption><span>read-csv.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">function</span> <span class="nx">handleFiles</span><span class="p">(</span><span class="nx">files</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check for the various File API support.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">FileReader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// FileReader are supported.</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;FileReader are not supported in this browser.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to read a file via browser ?</h2>

<p>To select a file we’re going to use a simple html <code>&lt;input type="file"&gt;</code></p>

<p>We just call handleFile to make JavaScript returns the list of selected File objects but we are going to use only one.</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;static/js/read-csv.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">id=</span><span class="s">&quot;csvFileInput&quot;</span> <span class="na">onchange=</span><span class="s">&quot;handleFiles(this.files)&quot;</span>
</span><span class='line'>            <span class="na">accept=</span><span class="s">&quot;.csv&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reading the File</h2>

<p>After we’ve obtained a File reference, we instantiate a FileReader object to read its contents into memory. When the load finishes, the reader’s onload event is fired and its result attribute can be used to access the file data.</p>

<p>FileReader includes four options for reading a file, asynchronously:
&ndash; <code>FileReader.readAsBinaryString(Blob|File)</code> – The result property will contain the file/blob’s data as a binary string. Every byte is represented by an integer in the range [0..255].
&ndash; <code>FileReader.readAsText(Blob|File, opt_encoding)</code> – The result property will contain the file/blob’s data as a text string. By default the string is decoded as ‘UTF-8’. Use the optional encoding parameter can specify a different format.
&ndash; <code>FileReader.readAsDataURL(Blob|File)</code> – The result property will contain the file/blob’s data encoded as a data URL.
&ndash; <code>FileReader.readAsArrayBuffer(Blob|File)</code> – The result property will contain the file/blob’s data as an ArrayBuffer object.</p>

<p>For our example, we want to read a CSV file, so we can read it as text. And perfom data processing after in <code>processData(csv)</code> function.</p>

<figure class='code'><figcaption><span>read-csv.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">function</span> <span class="nx">handleFiles</span><span class="p">(</span><span class="nx">files</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check for the various File API support.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">FileReader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// FileReader are supported.</span>
</span><span class='line'>        <span class="nx">getAsText</span><span class="p">(</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;FileReader are not supported in this browser.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getAsText</span><span class="p">(</span><span class="nx">fileToRead</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Read file into memory as UTF-8      </span>
</span><span class='line'>    <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsText</span><span class="p">(</span><span class="nx">fileToRead</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Handle errors load</span>
</span><span class='line'>    <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">loadHandler</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">reader</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="nx">errorHandler</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">loadHandler</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">csv</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">processData</span><span class="p">(</span><span class="nx">csv</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">processData</span><span class="p">(</span><span class="nx">csv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">allTextLines</span> <span class="o">=</span> <span class="nx">csv</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\r\n|\n/</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">lines</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">allTextLines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">allTextLines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">tarr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">tarr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="nx">lines</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tarr</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lines</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">errorHandler</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">evt</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="s2">&quot;NotReadableError&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Canno&#39;t read file !&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://github.com/MounirMesselmeni/html-fileapi">Source code</a> for this article.</li>
</ul>

]]></content>
  </entry>
  
</feed>
